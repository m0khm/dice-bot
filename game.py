# game.py
import sqlite3
import random
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.ext import CallbackContext, ContextTypes

class TournamentManager:
    FIRST_POINTS  = 50
    SECOND_POINTS = 25
    THIRD_POINTS  = 15

    def __init__(
        self,
        job_queue,
        allowed_chats=None,
        db_path: str = "scores.db",
        owner_ids=None
    ):
        self.job_queue      = job_queue
        self.allowed_chats  = set(allowed_chats or [])
        self.owner_ids      = list(owner_ids or [])
        self.chats          = {}

        # –ë–∞–∑–∞ –¥–ª—è –æ—á–∫–æ–≤
        self.conn = sqlite3.connect(db_path, check_same_thread=False)
        self._init_db()

    def _init_db(self):
        cur = self.conn.cursor()
        cur.execute("""
            CREATE TABLE IF NOT EXISTS scores (
                username TEXT PRIMARY KEY,
                points   INTEGER NOT NULL
            )
        """)
        self.conn.commit()

    def _format_username(self, name: str) -> str:
        return name if name.startswith("@") else f"@{name}"

    def _add_points(self, username: str, pts: int):
        cur = self.conn.cursor()
        cur.execute("SELECT points FROM scores WHERE username=?", (username,))
        row = cur.fetchone()
        if row:
            cur.execute("UPDATE scores SET points=? WHERE username=?", (row[0] + pts, username))
        else:
            cur.execute("INSERT INTO scores(username, points) VALUES(?, ?)", (username, pts))
        self.conn.commit()

    def get_points(self, username: str) -> int:
        cur = self.conn.cursor()
        cur.execute("SELECT points FROM scores WHERE username=?", (username,))
        row = cur.fetchone()
        return row[0] if row else 0

    def exchange_points(self, username: str) -> int:
        pts = self.get_points(username)
        if pts:
            cur = self.conn.cursor()
            cur.execute("UPDATE scores SET points=0 WHERE username=?", (username,))
            self.conn.commit()
        return pts

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ signup ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def begin_signup(self, chat_id: int) -> None:
        self.chats[chat_id] = {
            "players":           [],
            "stage":             "signup",
            "next_round":        [],
            "pairs":             [],
            "current_pair_idx":  0,
            "round_pairs_count": 0,
            "ready":             {},
            "first_ready_time":  {},
            "ready_jobs":        {},
            "round_wins":        {},
            "turn_order":        {},
            "semifinal_losers":  [],
            "pair_timers":       {},
            "dice_jobs":         {},
            "current_rolls":     {},   # <-- —Å–ø–∏—Å–∫–∏ –±—Ä–æ—Å–∫–æ–≤
            "finished_pairs":    set(),
        }

    def add_player(self, chat_id: int, user) -> bool:
        data = self.chats.get(chat_id)
        if not data or data["stage"] != "signup":
            return False
        name = user.username or user.full_name
        if name in data["players"]:
            return False
        data["players"].append(name)
        return True

    def list_players(self, chat_id: int) -> str:
        data = self.chats.get(chat_id, {})
        return ", ".join(self._format_username(n) for n in data.get("players", []))

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Å—Ç–∞—Ä—Ç —Ç—É—Ä–Ω–∏—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def start_tournament(self, chat_id: int):
        data = self.chats[chat_id]
        players = data["players"][:]
        if len(players) < 2:
            raise ValueError("–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞.")
        random.shuffle(players)
        data["next_round"] = []

        # bye, –µ—Å–ª–∏ –Ω–µ—á—ë—Ç–Ω–æ–µ
        byes = []
        if len(players) % 2:
            bye = players.pop(random.randrange(len(players)))
            byes.append(bye)
            data["next_round"].append(bye)

        pairs = [(players[i], players[i+1]) for i in range(0, len(players), 2)]
        data.update({
            "stage":             "round",
            "pairs":             pairs,
            "current_pair_idx":  0,
            "round_pairs_count": len(pairs),
            "ready":             {},
            "first_ready_time":  {},
            "ready_jobs":        {},
            "round_wins":        {},
            "turn_order":        {},
            "current_rolls":     {},  # –æ–±–Ω—É–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—Ä–æ—Å–∫–∏
            "finished_pairs":    set(),
        })

        # —Ç–µ–∫—Å—Ç —Å–µ—Ç–∫–∏
        pairs_list = "\n".join(
            f"–ü–∞—Ä–∞ {i+1}: {self._format_username(a)} vs {self._format_username(b)}"
            for i,(a,b) in enumerate(pairs)
        )

        # –ø–µ—Ä–≤–∞—è –ø–∞—Ä–∞
        a,b = pairs[0]
        first_msg = f"–ü–∞—Ä–∞ 1: {self._format_username(a)} vs {self._format_username(b)}\n–ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤?¬ª"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ì–æ—Ç–æ–≤?", callback_data="ready_0")]])

        # –æ–±—â–∏–π —Ç–∞–π–º–µ—Ä –ø–∞—Ä—ã: 120 —Å–µ–∫
        if self.job_queue:
            jt = self.job_queue.run_once(
                self._pair_timeout, 120,
                chat_id=chat_id, data={"idx":0},
                name=f"pair_timeout_{chat_id}_0"
            )
            data["pair_timers"][0] = jt

        return byes, pairs_list, first_msg, kb

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –Ω–∞–∂–∞–ª–∏ ¬´–ì–æ—Ç–æ–≤?¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    async def confirm_ready(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query
        await q.answer()

        chat_id = q.message.chat.id
        idx     = int(q.data.split("_")[1])
        name    = q.from_user.username or q.from_user.full_name
        data    = self.chats[chat_id]
        pair    = data["pairs"][idx]

        if name not in pair:
            return await q.answer("‚ùå –í—ã –Ω–µ –≤ —ç—Ç–æ–π –ø–∞—Ä–µ.", show_alert=True)

        lst = data["ready"].setdefault(idx, [])
        if name in lst:
            return
        lst.append(name)
        now = time.time()

        # –ø–µ—Ä–≤—ã–π –≥–æ—Ç–æ–≤ -> –∂–¥–µ–º –≤—Ç–æ—Ä–æ–≥–æ 60 —Å–µ–∫
        if len(lst) == 1:
            data["first_ready_time"][idx] = now
            if self.job_queue:
                # —Ç–∞–π–º–∞—É—Ç –≤—Ç–æ—Ä–æ–≥–æ ¬´–≥–æ—Ç–æ–≤¬ª
                rj = self.job_queue.run_once(
                    self._ready_timeout, 60,
                    chat_id=chat_id, data={"idx":idx},
                    name=f"ready_timeout_{chat_id}_{idx}"
                )
                data["ready_jobs"][idx] = rj
                # –ø–µ—Ä–µ—Å–±—Ä–æ—Å –æ–±—â–µ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞ –ø–∞—Ä—ã:
                pj = data["pair_timers"].pop(idx, None)
                if pj: pj.schedule_removal()
                pj2 = self.job_queue.run_once(
                    self._pair_timeout, 60,
                    chat_id=chat_id, data={"idx":idx},
                    name=f"pair_timeout_{chat_id}_{idx}"
                )
                data["pair_timers"][idx] = pj2

            await context.bot.send_message(
                chat_id,
                f"‚úÖ {self._format_username(name)} –≥–æ—Ç–æ–≤! –ñ–¥—ë–º –≤—Ç–æ—Ä–æ–≥–æ –¥–æ 60 —Å."
            )

        # –æ–±–∞ –≥–æ—Ç–æ–≤—ã
        else:
            ts0 = data["first_ready_time"].get(idx, 0)
            if now - ts0 <= 60:
                # –æ—Ç–º–µ–Ω—è–µ–º –æ–±–∞ —Ç–∞–π–º–µ—Ä–∞: –≤—Ç–æ—Ä–æ–≥–æ ¬´–≥–æ—Ç–æ–≤¬ª –∏ –ø–∞—Ä—ã
                rj = data["ready_jobs"].pop(idx, None)
                if rj: rj.schedule_removal()
                pj = data["pair_timers"].pop(idx, None)
                if pj: pj.schedule_removal()

                a,b = pair
                data["round_wins"][idx] = {a:0, b:0}
                first, second = random.sample(pair, 2)
                data["turn_order"][idx] = (first, second)

                await context.bot.send_message(
                    chat_id,
                    f"üé≤ –û–±–∞ –≥–æ—Ç–æ–≤—ã! {self._format_username(first)} —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dice"
                )

                # —Ç–∞–π–º–∞—É—Ç –ø–µ—Ä–≤–æ–≥–æ –±—Ä–æ—Å–∫–∞
                if self.job_queue:
                    dj = self.job_queue.run_once(
                        self._dice_timeout, 60,
                        chat_id=chat_id,
                        data={"idx":idx, "expected":first},
                        name=f"dice_timeout_{chat_id}_{idx}"
                    )
                    data["dice_jobs"][idx] = dj

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ç–∞–π–º–∞—É—Ç –≤—Ç–æ—Ä–æ–≥–æ ¬´–≥–æ—Ç–æ–≤¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    async def _ready_timeout(self, context: CallbackContext):
        job     = context.job
        chat_id = job.chat_id
        idx     = job.data["idx"]
        data    = self.chats[chat_id]
        conf    = data["ready"].get(idx, [])
        pair    = data["pairs"][idx]

        if len(conf) >= 2:
            return

        if len(conf) == 1:
            winner = conf[0]
            data["next_round"].append(winner)
            data["finished_pairs"].add(idx)
            await context.bot.send_message(chat_id, f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ ‚Äî {winner} –ø—Ä–æ—à—ë–ª –¥–∞–ª—å—à–µ.")
        else:
            a,b = pair
            await context.bot.send_message(chat_id, f"‚è∞ –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª ‚Äî –æ–±–∞ –≤—ã–±—ã–≤–∞—é—Ç: {a}, {b}.")

        await self._proceed_next(chat_id, context.bot)

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –ø–∞—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    async def _pair_timeout(self, context: CallbackContext):
        job     = context.job
        chat_id = job.chat_id
        idx     = job.data["idx"]
        data    = self.chats[chat_id]

        if idx in data["finished_pairs"]:
            return

        conf = data["ready"].get(idx, [])
        pair = data["pairs"][idx]
        if not conf:
            a,b = pair
            await context.bot.send_message(
                chat_id,
                f"‚è∞ –ü–∞—Ä–∞ {self._format_username(a)} vs {self._format_username(b)} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ ‚Äî –æ–±–∞ –≤—ã–±—ã–≤–∞—é—Ç."
            )
            data["finished_pairs"].add(idx)

        await self._proceed_next(chat_id, context.bot)

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è /dice ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    async def _dice_timeout(self, context: CallbackContext):
        job     = context.job
        chat_id = job.chat_id
        idx     = job.data["idx"]
        exp     = job.data["expected"]
        data    = self.chats.get(chat_id)
        if not data or data["stage"] != "round":
            return

        rolls = data["current_rolls"].get(idx, [])
        a,b   = data["pairs"][idx]
        if exp not in [u for u,_ in rolls]:
            winner = b if exp == a else a
            data["next_round"].append(winner)
            data["finished_pairs"].add(idx)
            await context.bot.send_message(
                chat_id,
                f"‚è∞ {self._format_username(exp)} –Ω–µ –±—Ä–æ—Å–∏–ª ‚Äî {self._format_username(winner)} –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–∞–ª—å—à–µ."
            )
            # —á–∏—Å—Ç–∏–º —Ç–∞–π–º–µ—Ä—ã –ø–∞—Ä—ã
            dj = data["dice_jobs"].pop(idx, None)
            if dj: dj.schedule_removal()
            pj = data["pair_timers"].pop(idx, None)
            if pj: pj.schedule_removal()
            await self._proceed_next(chat_id, context.bot)

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    async def _proceed_next(self, chat_id: int, bot):
        data = self.chats[chat_id]
        data["current_pair_idx"] += 1
        idx  = data["current_pair_idx"]
        pairs = data["pairs"]

        if idx < len(pairs):
            a,b = pairs[idx]
            kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ì–æ—Ç–æ–≤?", callback_data=f"ready_{idx}")]])
            await bot.send_message(
                chat_id,
                f"–ü–∞—Ä–∞ {idx+1}: {self._format_username(a)} vs {self._format_username(b)}\n–ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤?¬ª",
                reply_markup=kb
            )
            return

        # ... –∞ —Ç—É—Ç –≤–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª–∞ ...

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    async def roll_dice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        name    = update.effective_user.username or update.effective_user.full_name
        data    = self.chats.get(chat_id, {})

        if data.get("stage") != "round":
            return "‚ùó –¢—É—Ä–Ω–∏—Ä –µ—â—ë –Ω–µ –∏–¥—ë—Ç."

        idx = data["current_pair_idx"]
        # –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç —ç—Ç–æ–≥–æ –±—Ä–æ—Å–∫–∞
        dj = data["dice_jobs"].pop(idx, None)
        if dj:
            dj.schedule_removal()

        a,b = data["pairs"][idx]
        if name not in (a,b):
            return "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –ø–∞—Ä–µ."

        # —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–∫—É—â–∏—Ö –±—Ä–æ—Å–∫–æ–≤
        rolls = data["current_rolls"].setdefault(idx, [])
        first, second = data["turn_order"].get(idx, (a, b))

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —á—å—é –æ—á–µ—Ä–µ–¥—å
        if not rolls:
            turn = first
        elif len(rolls) == 1:
            turn = second
        else:
            return "‚ùå –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."

        if name != turn:
            return "‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥."

        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±—Ä–æ—Å–æ–∫
        val = random.randint(1,6)
        rolls.append((name, val))
        await update.effective_chat.send_message(f"{self._format_username(name)} –±—Ä–æ—Å–∏–ª üé≤ {val}.")

        # –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –±—Ä–æ—Å–æ–∫ ‚Äî –ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–π
        if len(rolls) == 1:
            # —Ç–∞–π–º–∞—É—Ç –≤—Ç–æ—Ä–æ–≥–æ –±—Ä–æ—Å–∫–∞
            if self.job_queue:
                dj2 = self.job_queue.run_once(
                    self._dice_timeout, 60,
                    chat_id=chat_id,
                    data={"idx":idx, "expected":second},
                    name=f"dice_timeout_{chat_id}_{idx}"
                )
                data["dice_jobs"][idx] = dj2
            return f"–•–æ–¥ {self._format_username(second)}."

        # –æ–±–∞ –±—Ä–æ—Å–∏–ª–∏ ‚Äî –∞–Ω–∞–ª–∏–∑
        _, v1 = rolls[0]
        _, v2 = rolls[1]
        # –Ω–∏—á—å—è
        if v1 == v2:
            rolls.clear()
            await update.effective_chat.send_message(f"–ù–∏—á—å—è {v1}‚Äì{v2}! –ü–µ—Ä–µ–±—Ä–æ—Å, {self._format_username(first)} —Å–Ω–æ–≤–∞ –ø–µ—Ä–≤—ã–º.")
            # —Ç–∞–π–º–∞—É—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–µ–±—Ä–æ—Å–∞
            if self.job_queue:
                dj3 = self.job_queue.run_once(
                    self._dice_timeout, 60,
                    chat_id=chat_id,
                    data={"idx":idx, "expected":first},
                    name=f"dice_timeout_{chat_id}_{idx}"
                )
                data["dice_jobs"][idx] = dj3
            return ""

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–∞—Ä—ã
        winner = a if v1 > v2 else b
        data["round_wins"].setdefault(idx, {a:0, b:0})[winner] += 1
        data["current_rolls"][idx] = []  # –æ—á–∏—â–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±—Ä–æ—Å–∫–∞
        # –µ—Å–ª–∏ –Ω–∞–±—Ä–∞–ª 2 –ø–æ–±–µ–¥—ã ‚Äî –ø–∞—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω–∞
        if data["round_wins"][idx][winner] >= 2:
            await update.effective_chat.send_message(f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–∞—Ä—ã: {self._format_username(winner)}")
            data["next_round"].append(winner)
            data["finished_pairs"].add(idx)
            # –æ—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–∞–π–º–∞—É—Ç—ã
            pj = data["pair_timers"].pop(idx, None)
            if pj: pj.schedule_removal()
            await self._proceed_next(chat_id, context.bot)
            return ""
        else:
            # —Å–ª–µ–¥—É—é—â–∏–π –±—Ä–æ—Å–æ–∫ —ç—Ç–æ–π –∂–µ –ø–∞—Ä—ã
            data["turn_order"][idx] = (first, second)
            await update.effective_chat.send_message(
                f"–°—á—ë—Ç {data['round_wins'][idx][a]}‚Äì{data['round_wins'][idx][b]}. {self._format_username(first)} —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º."
            )
            # –ø–ª–∞–Ω–∏—Ä—É–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–µ—Ä–µ–±—Ä–æ—Å–∞
            if self.job_queue:
                dj4 = self.job_queue.run_once(
                    self._dice_timeout, 60,
                    chat_id=chat_id,
                    data={"idx":idx, "expected":first},
                    name=f"dice_timeout_{chat_id}_{idx}"
                )
                data["dice_jobs"][idx] = dj4
            return ""
