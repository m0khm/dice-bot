# game.py

import random
import time
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

class TournamentManager:
    def __init__(self, job_queue):
        # job_queue ‚Äî –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
        self.job_queue = job_queue
        # chats —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ –ø–æ –µ–≥–æ ID
        self.chats = {}

    def begin_signup(self, chat_id):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
        self.chats[chat_id] = {
            "players": [],
            "stage": "signup",
            "next_round": [],
            "pairs": [],
            "current_pair_idx": 0,
            "round_pairs_count": 0,
            "ready": {},
            "first_ready_time": {},
            "ready_jobs": {},
            "round_wins": {},
            "round_rolls": {},
            "turn_order": {},
            "semifinal_losers": [],
        }

    def add_player(self, chat_id, user):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ —ç—Ç–∞–ø–µ signup."""
        data = self.chats.get(chat_id)
        if not data or data["stage"] != "signup":
            return False
        name = user.username or user.full_name
        if name in data["players"]:
            return False
        data["players"].append(name)
        return True

    def list_players(self, chat_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é."""
        return ", ".join(self.chats[chat_id]["players"])

    def start_tournament(self, chat_id):
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–∞—Ä—ã:
         - –æ–¥–∏–Ω 'bye' –¥–ª—è –Ω–µ—á—ë—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞,
         - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä,
         - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (byes, pairs_list, first_msg, kb).
        """
        data = self.chats.get(chat_id)
        players = data and data["players"][:]
        if not players or len(players) < 2:
            raise ValueError("–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞.")
        random.shuffle(players)
        data["next_round"] = []

        # bye
        byes = []
        if len(players) % 2 == 1:
            bye = players.pop(random.randrange(len(players)))
            byes.append(bye)
            data["next_round"].append(bye)

        # –ø–∞—Ä—ã
        pairs = [(players[i], players[i+1]) for i in range(0, len(players), 2)]
        data.update({
            "stage": "round",
            "pairs": pairs,
            "current_pair_idx": 0,
            "round_pairs_count": len(pairs),
            "ready": {},
            "first_ready_time": {},
            "ready_jobs": {},
            "round_wins": {},
            "round_rolls": {},
            "turn_order": {},
        })

        # —Å—Ç—Ä–æ–∏–º —Ç–µ–∫—Å—Ç —Å–æ –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–∏
        pairs_list = "\n".join(f"–ü–∞—Ä–∞ {i+1}: {a} vs {b}"
                               for i, (a, b) in enumerate(pairs))
        # –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã
        first_msg = (f"–ü–∞—Ä–∞ 1: {pairs[0][0]} vs {pairs[0][1]}\n"
                     "–ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤?¬ª")
        kb = InlineKeyboardMarkup.from_button(
            InlineKeyboardButton("–ì–æ—Ç–æ–≤?", callback_data="ready_0")
        )
        return byes, pairs_list, first_msg, kb

    async def confirm_ready(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤?¬ª:
         - –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–∞—É—Ç 60 —Å,
         - –≤—Ç–æ—Ä–æ–π –∫–ª–∏–∫ –¥–æ —Ç–∞–π–º–∞—É—Ç–∞ –æ—Ç–º–µ–Ω—è–µ—Ç –µ–≥–æ –∏ —Å—Ç–∞—Ä—Ç—É–µ—Ç –º–∞—Ç—á.
        """
        q = update.callback_query
        await q.answer()
        chat_id = q.message.chat.id
        idx = int(q.data.split("_")[1])
        name = q.from_user.username or q.from_user.full_name
        data = self.chats[chat_id]

        lst = data.setdefault("ready", {}).setdefault(idx, [])
        if name in lst:
            return
        lst.append(name)
        now = time.time()

        # –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫
        if len(lst) == 1:
            data["first_ready_time"][idx] = now
            job = self.job_queue.run_once(
                self._ready_timeout,
                when=60,
                chat_id=chat_id,
                data={"idx": idx}
            )
            data["ready_jobs"][idx] = job
            await context.bot.send_message(chat_id, f"{name} –≥–æ—Ç–æ–≤! –ñ–¥—ë–º –≤—Ç–æ—Ä–æ–≥–æ‚Ä¶")
        else:
            # –≤—Ç–æ—Ä–æ–π –∫–ª–∏–∫ –¥–æ 60 —Å
            first_ts = data["first_ready_time"].get(idx, 0)
            if now - first_ts <= 60:
                job = data["ready_jobs"].pop(idx, None)
                if job:
                    job.schedule_removal()
                a, b = data["pairs"][idx]
                data["round_wins"][idx] = {a: 0, b: 0}
                first, second = random.sample((a, b), 2)
                data["turn_order"][idx] = (first, second)
                await context.bot.send_message(
                    chat_id, f"{first} —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dice"
                )

    def _ready_timeout(self, context: CallbackContext):
        """
        –¢–∞–π–º–∞—É—Ç 60 —Å: –µ—Å–ª–∏ –≤—Ç–æ—Ä—É—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ ‚Äî
        –æ–±—ä—è–≤–ª—è–µ–º –æ–¥–∏–Ω–æ–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–µ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –∏–ª–∏ –æ–±–æ–∏—Ö –≤—ã–±—ã–≤—à–∏–º–∏.
        """
        job = context.job
        chat_id = job.chat_id
        idx = job.data["idx"]
        data = self.chats[chat_id]
        confirmed = data.get("ready", {}).get(idx, [])

        # –æ–±–∞ —É—Å–ø–µ–ª–∏ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if len(confirmed) >= 2:
            return

        # –æ–¥–∏–Ω —É—Å–ø–µ–ª ‚Üí –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–∞–ª—å—à–µ
        if len(confirmed) == 1:
            winner = confirmed[0]
            loser = next(p for p in data["pairs"][idx] if p != winner)
            data["next_round"].append(winner)
            context.bot.send_message(
                chat_id,
                f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! {winner} –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–∞–ª—å—à–µ, {loser} –Ω–µ –Ω–∞–∂–∞–ª ¬´–ì–æ—Ç–æ–≤?¬ª."
            )
        else:
            # –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–∂–∞–ª ‚Äî –æ–±–∞ –≤—ã–±—ã–≤–∞—é—Ç
            a, b = data["pairs"][idx]
            context.bot.send_message(
                chat_id,
                f"‚è∞ –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª ‚Äî –æ–±–∞ –≤—ã–±—ã–≤–∞—é—Ç: {a}, {b}."
            )

        # —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ –∏–ª–∏ —Ä–∞—É–Ω–¥—É/—Ñ–∏–Ω–∞–ª—É
        self._proceed_next(chat_id, context.bot)

    def _proceed_next(self, chat_id, bot):
        """
        –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ:
         - –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –ø–∞—Ä—ã ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–ì–æ—Ç–æ–≤?¬ª –Ω–æ–≤–æ–π –ø–∞—Ä–µ,
         - –∏–Ω–∞—á–µ ‚Üí –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –∏–ª–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º –ø—Ä–∏–∑—ë—Ä–æ–≤.
        """
        data = self.chats[chat_id]
        data["current_pair_idx"] += 1
        idx = data["current_pair_idx"]
        pairs = data["pairs"]

        # –Ω–æ–≤–∞—è –ø–∞—Ä–∞
        if idx < len(pairs):
            a, b = pairs[idx]
            kb = InlineKeyboardMarkup.from_button(
                InlineKeyboardButton("–ì–æ—Ç–æ–≤?", callback_data=f"ready_{idx}")
            )
            bot.send_message(
                chat_id,
                f"–ü–∞—Ä–∞ {idx+1}: {a} vs {b}\n–ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤?¬ª",
                reply_markup=kb
            )
            return

        # –≤—Å–µ –ø–∞—Ä—ã —Ä–∞—É–Ω–¥–∞ —Å—ã–≥—Ä–∞–Ω—ã
        winners = data["next_round"]
        # –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ª—É–∑–µ—Ä—ã –¥–ª—è –±—Ä–æ–Ω–∑—ã (–µ—Å–ª–∏ –±—ã–ª–æ 2 –ø–∞—Ä—ã)
        if data["round_pairs_count"] == 2:
            for i, (x, y) in enumerate(data["pairs"]):
                w = data["round_wins"].get(i, {})
                if w.get(x, 0) != w.get(y, 0):
                    loser = x if w[x] < w[y] else y
                    data["semifinal_losers"].append(loser)

        # –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
        if len(winners) > 1:
            data["players"] = winners.copy()
            byes, pairs_list, msg, kb = self.start_tournament(chat_id)
            for bye in byes:
                bot.send_message(chat_id, f"üéâ {bye} –ø–æ–ª—É—á–∞–µ—Ç bye.")
            bot.send_message(chat_id, "–°–µ—Ç–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞:\n" + pairs_list)
            bot.send_message(chat_id, msg, reply_markup=kb)
            return

        # —Ñ–∏–Ω–∞–ª
        champ = winners[0]
        runner = None
        w = data["round_wins"].get(0, {})
        if w:
            p, q = data["pairs"][0]
            runner = p if w.get(p, 0) < w.get(q, 0) else q
        thirds = data["semifinal_losers"]

        text = f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {champ}\n"
        if runner:
            text += f"ü•à –í—Ç–æ—Ä–æ–µ: {runner}\n"
        if len(thirds) >= 2:
            text += f"ü•â –¢—Ä–µ—Ç—å–∏: {thirds[0]}, {thirds[1]}\n"
        bot.send_message(chat_id, text)
        data["stage"] = "finished"

    async def roll_dice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /dice ‚Äî –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ,
        –ø–æ–¥—Å—á—ë—Ç best-of-3 –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ –ø—Ä–∏ 2 –ø–æ–±–µ–¥–∞—Ö.
        """
        chat_id = update.effective_chat.id
        name = update.effective_user.username or update.effective_user.full_name
        data = self.chats[chat_id]

        if data["stage"] != "round":
            return "–¢—É—Ä–Ω–∏—Ä –µ—â—ë –Ω–µ –∏–¥—ë—Ç."

        idx = data["current_pair_idx"]
        if idx >= len(data["pairs"]):
            return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞—Ä—ã."

        a, b = data["pairs"][idx]
        if name not in (a, b):
            return "–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –ø–∞—Ä–µ."

        wins = data["round_wins"].setdefault(idx, {a: 0, b: 0})
        rolls = data["round_rolls"].setdefault(idx, {})
        first, second = data["turn_order"].get(idx, (a, b))

        # —á–µ–π —Ö–æ–¥?
        if not rolls:
            turn = first
        elif len(rolls) == 1:
            turn = second
        else:
            turn = None

        if name != turn:
            return "–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥."

        val = random.randint(1, 6)
        rolls[name] = val

        # –µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ–±–∞ –±—Ä–æ—Å–∏–ª–∏
        if len(rolls) < 2:
            nxt = second if name == first else first
            return f"{name} –±—Ä–æ—Å–∏–ª {val}. –•–æ–¥ {nxt}."
        else:
            r1, r2 = rolls[a], rolls[b]
            if r1 == r2:
                data["round_rolls"][idx] = {}
                return f"–ù–∏—á—å—è {r1}‚Äì{r2}! –ü–µ—Ä–µ–±—Ä–æ—Å, {first} —Å–Ω–æ–≤–∞ –ø–µ—Ä–≤—ã–º."
            winner = a if r1 > r2 else b
            wins[winner] += 1
            data["round_rolls"][idx] = {}
            if wins[winner] >= 2:
                await update.effective_chat.send_message(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–∞—Ä—ã: {winner}")
                data["next_round"].append(winner)
                self._proceed_next(chat_id, context.bot)
                return ""
            else:
                data["turn_order"][idx] = (first, second)
                return f"–°—á—ë—Ç {wins[a]}‚Äì{wins[b]}. {first} —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º."
