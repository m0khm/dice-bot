# game.py

import random
import time
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, ContextTypes

class TournamentManager:
    def __init__(self, job_queue):
        self.job_queue = job_queue
        self.chats = {}

    def begin_signup(self, chat_id):
        self.chats[chat_id] = {
            "players": [], "stage": "signup",
            "next_round": [], "pairs": [],
            "current_pair_idx": 0, "round_pairs_count": 0,
            "ready": {}, "first_ready_time": {}, "ready_jobs": {},
            "round_wins": {}, "round_rolls": {}, "turn_order": {},
            "semifinal_losers": [],
        }

    def add_player(self, chat_id, user):
        data = self.chats.get(chat_id)
        if not data or data["stage"] != "signup":
            return False
        name = user.username or user.full_name
        if name in data["players"]:
            return False
        data["players"].append(name)
        return True

    def list_players(self, chat_id):
        return ", ".join(self.chats[chat_id]["players"])

    def start_tournament(self, chat_id):
        data = self.chats.get(chat_id)
        players = data and data["players"][:]
        if not players or len(players) < 2:
            raise ValueError("–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞.")
        random.shuffle(players)
        data["next_round"] = []

        # bye
        byes = []
        if len(players) % 2 == 1:
            bye = players.pop(random.randrange(len(players)))
            byes.append(bye)
            data["next_round"].append(bye)

        # –ø–∞—Ä—ã
        pairs = [(players[i], players[i+1]) for i in range(0, len(players), 2)]
        data.update({
            "stage": "round", "pairs": pairs,
            "current_pair_idx": 0,
            "round_pairs_count": len(pairs),
            "ready": {}, "first_ready_time": {},
            "ready_jobs": {}, "round_wins": {},
            "round_rolls": {}, "turn_order": {},
        })

        # —Ç–µ–∫—Å—Ç —Å–æ –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–∏
        pairs_list = "\n".join(
            f"–ü–∞—Ä–∞ {i+1}: {a} vs {b}" for i, (a, b) in enumerate(pairs)
        )
        first_msg = f"–ü–∞—Ä–∞ 1: {pairs[0][0]} vs {pairs[0][1]}\n–ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤?¬ª"
        kb = InlineKeyboardMarkup.from_button(
            InlineKeyboardButton("–ì–æ—Ç–æ–≤?", callback_data="ready_0")
        )
        return byes, pairs_list, first_msg, kb

    async def confirm_ready(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query
        await q.answer()
        chat_id = q.message.chat.id
        idx = int(q.data.split("_")[1])
        name = q.from_user.username or q.from_user.full_name
        data = self.chats[chat_id]

        lst = data.setdefault("ready", {}).setdefault(idx, [])
        if name in lst:
            return
        lst.append(name)
        now = time.time()

        # –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫ ‚Üí —Ç–∞–π–º–∞—É—Ç
        if len(lst) == 1:
            data["first_ready_time"][idx] = now
            job = self.job_queue.run_once(
                self._ready_timeout,
                when=60,
                chat_id=chat_id,
                data={"idx": idx}
            )
            data["ready_jobs"][idx] = job
            await context.bot.send_message(chat_id, f"{name} –≥–æ—Ç–æ–≤! –ñ–¥—ë–º –≤—Ç–æ—Ä–æ–≥–æ‚Ä¶")
        else:
            # –≤—Ç–æ—Ä–æ–π –∫–ª–∏–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 60 —Å ‚Üí —Å—Ç–∞—Ä—Ç
            first_ts = data["first_ready_time"].get(idx, 0)
            if now - first_ts <= 60:
                job = data["ready_jobs"].pop(idx, None)
                if job:
                    job.schedule_removal()
                a, b = data["pairs"][idx]
                data["round_wins"][idx] = {a: 0, b: 0}
                first, second = random.sample((a, b), 2)
                data["turn_order"][idx] = (first, second)
                await context.bot.send_message(
                    chat_id, f"{first} —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dice"
                )

    def _ready_timeout(self, context: CallbackContext):
        job     = context.job
        chat_id = job.chat_id
        idx     = job.data["idx"]
        data    = self.chats[chat_id]
        confirmed = data.get("ready", {}).get(idx, [])

        if len(confirmed) >= 2:
            return  # –æ–±–∞ —É—Å–ø–µ–ª–∏

        if len(confirmed) == 1:
            winner = confirmed[0]
            loser  = next(p for p in data["pairs"][idx] if p != winner)
            data["next_round"].append(winner)
            context.bot.send_message(
                chat_id,
                f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! {winner} –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–∞–ª—å—à–µ, {loser} –Ω–µ –Ω–∞–∂–∞–ª ¬´–ì–æ—Ç–æ–≤?¬ª."
            )
        else:
            a, b = data["pairs"][idx]
            context.bot.send_message(
                chat_id,
                f"‚è∞ –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª ‚Äî –æ–±–∞ –≤—ã–±—ã–≤–∞—é—Ç: {a}, {b}."
            )

        # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ
        self._proceed_next(chat_id, context.bot)

    def _proceed_next(self, chat_id, bot):
        data = self.chats[chat_id]
        data["current_pair_idx"] += 1
        idx   = data["current_pair_idx"]
        pairs = data["pairs"]

        # –µ—Å–ª–∏ –µ—â—ë –ø–∞—Ä—ã
        if idx < len(pairs):
            a, b = pairs[idx]
            kb = InlineKeyboardMarkup.from_button(
                InlineKeyboardButton("–ì–æ—Ç–æ–≤?", callback_data=f"ready_{idx}")
            )
            bot.send_message(
                chat_id,
                f"–ü–∞—Ä–∞ {idx+1}: {a} vs {b}\n–ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤?¬ª",
                reply_markup=kb
            )
            return

        # –≤—Å–µ –ø–∞—Ä—ã —Ä–∞—É–Ω–¥–∞ —Å—ã–≥—Ä–∞–Ω—ã
        winners = data["next_round"]
        if data["round_pairs_count"] == 2:
            # –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ª—É–∑–µ—Ä—ã –¥–ª—è ü•â
            for i, (x, y) in enumerate(data["pairs"]):
                w = data["round_wins"].get(i, {})
                if w.get(x,0) != w.get(y,0):
                    loser = x if w[x] < w[y] else y
                    data["semifinal_losers"].append(loser)

        # –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥?
        if len(winners) > 1:
            data["players"] = winners.copy()
            byes, pairs_list, msg, kb = self.start_tournament(chat_id)
            bot.send_message(chat_id, "–°–µ—Ç–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞:\n" + pairs_list)
            bot.send_message(chat_id, msg, reply_markup=kb)
            return

        # —Ñ–∏–Ω–∞–ª ‚Äî –æ–±—ä—è–≤–ª—è–µ–º –ø—Ä–∏–∑—ë—Ä–æ–≤
        champ    = winners[0]
        runner   = None
        w        = data["round_wins"].get(0, {})
        if w:
            p, q = data["pairs"][0]
            runner = p if w.get(p,0) < w.get(q,0) else q
        thirds   = data["semifinal_losers"]

        text = f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {champ}\n"
        if runner:
            text += f"ü•à –í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ: {runner}\n"
        if len(thirds) >= 2:
            text += f"ü•â –¢—Ä–µ—Ç—å–∏: {thirds[0]}, {thirds[1]}\n"

        bot.send_message(chat_id, text)
        data["stage"] = "finished"

    async def roll_dice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /dice ‚Äî –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞: –≤—Å–µ–≥–¥–∞ –ø—É–±–ª–∏–∫—É–µ–º —á–∏—Å–ª–æ,
        –∞ –∑–∞—Ç–µ–º –ª–∏–±–æ –ø–µ—Ä–µ–¥–∞—ë–º —Ö–æ–¥, –ª–∏–±–æ —Å—á–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        """
        chat_id = update.effective_chat.id
        name    = update.effective_user.username or update.effective_user.full_name
        data    = self.chats[chat_id]

        if data["stage"] != "round":
            return "–¢—É—Ä–Ω–∏—Ä –µ—â—ë –Ω–µ –∏–¥—ë—Ç."

        idx = data["current_pair_idx"]
        if idx >= len(data["pairs"]):
            return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞—Ä—ã."

        a, b = data["pairs"][idx]
        if name not in (a, b):
            return "–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –ø–∞—Ä–µ."

        wins  = data["round_wins"].setdefault(idx, {a: 0, b: 0})
        rolls = data["round_rolls"].setdefault(idx, {})
        first, second = data["turn_order"].get(idx, (a, b))

        # —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥
        if not rolls:
            turn = first
        elif len(rolls) == 1:
            turn = second
        else:
            turn = None

        if name != turn:
            return "–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥."

        # –±—Ä–æ—Å–∞–µ–º
        val = random.randint(1, 6)
        rolls[name] = val
        # –≤—Å–µ–≥–¥–∞ –ø—É–±–ª–∏–∫—É–µ–º —á–∏—Å–ª–æ
        await update.effective_chat.send_message(f"{name} –±—Ä–æ—Å–∏–ª üé≤ {val}.")

        if len(rolls) < 2:
            # –ø–µ—Ä–µ–¥–∞—ë–º —Ö–æ–¥
            nxt = second if name == first else first
            return f"–•–æ–¥ {nxt}."
        else:
            # –æ–±–∞ –±—Ä–æ—Å–∏–ª–∏ ‚Äî —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
            r1, r2 = rolls[a], rolls[b]
            if r1 == r2:
                data["round_rolls"][idx] = {}
                return f"–ù–∏—á—å—è {r1}‚Äì{r2}! –ü–µ—Ä–µ–±—Ä–æ—Å, {first} —Å–Ω–æ–≤–∞ –ø–µ—Ä–≤—ã–º."

            # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–±–µ–¥—É –≤ —Ä–∞—É–Ω–¥–µ
            winner = a if r1 > r2 else b
            wins[winner] += 1
            data["round_rolls"][idx] = {}

            if wins[winner] >= 2:
                # –æ–±—ä—è–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–∞—Ä—ã
                await update.effective_chat.send_message(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–∞—Ä—ã: {winner}")
                data["next_round"].append(winner)
                # –∞–Ω–æ–Ω—Å —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—ã –∏–ª–∏ —Ñ–∏–Ω–∞–ª–∞
                self._proceed_next(chat_id, context.bot)
                return ""
            else:
                # —Å—á—ë—Ç –µ—â—ë –Ω–µ —Ä–µ—à—ë–Ω ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –≤–Ω—É—Ç—Ä–∏ –ø–∞—Ä—ã
                data["turn_order"][idx] = (first, second)
                return f"–°—á—ë—Ç {wins[a]}‚Äì{wins[b]}. {first} —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º."
