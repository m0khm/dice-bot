import random
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

class TournamentManager:
    def __init__(self):
        # state per chat_id
        self.chats = {}

    def begin_signup(self, chat_id: int):
        self.chats[chat_id] = {
            "players": [],
            "stage": "signup",
        }

    def add_player(self, chat_id: int, user) -> bool:
        data = self.chats.get(chat_id)
        if not data or data["stage"] != "signup":
            return False
        uname = user.username or user.full_name
        if uname in data["players"]:
            return False
        data["players"].append(uname)
        return True

    def list_players(self, chat_id: int) -> str:
        return "\n".join(f"- {u}" for u in self.chats[chat_id]["players"])

    def start_tournament(self, chat_id: int):
        data = self.chats.get(chat_id)
        players = data and data.get("players", [])
        if not players or len(players) < 2:
            raise ValueError("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 2).")
        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        data.update({
            "stage": "round",
            "round_number": 1,
            "round_players": players.copy(),
            "next_round_players": [],
            "current_pair_idx": 0,
            "scores": {},          # { pair_idx: {player: wins} }
            "turns": {},           # { pair_idx: current mover }
            "last_roll": {},       # { pair_idx: last roll or None }
            "semifinal_losers": [],# —Å–æ–±–µ—Ä—ë–º –∑–¥–µ—Å—å –∞—É—Ç—Å–∞–π–¥–µ—Ä–æ–≤ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª–∞
        })
        # –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥
        return self._start_round(chat_id)

    def _start_round(self, chat_id: int):
        data = self.chats[chat_id]
        rp = data["round_players"]
        random.shuffle(rp)
        data["pairs"] = [(rp[i], rp[i+1]) for i in range(0, len(rp), 2)]
        data["current_pair_idx"] = 0
        data["next_round_players"] = []

        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á—ë—Ç –∏ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å
        for idx, (a, b) in enumerate(data["pairs"]):
            data["scores"][idx] = {a: 0, b: 0}
            data["turns"][idx] = a
            data["last_roll"][idx] = None

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É
        p0 = data["pairs"][0]
        kb = InlineKeyboardMarkup.from_button(
            InlineKeyboardButton("–ì–æ—Ç–æ–≤?", callback_data="ready_0")
        )
        return f"üèÅ –†–∞—É–Ω–¥ {data['round_number']} ‚Äî –ø–∞—Ä–∞ 1:\n{p0[0]} vs {p0[1]}", kb

    def confirm_ready(self, chat_id: int, user, cb_data: str):
        """–í—ã–∑—ã–≤–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '–ì–æ—Ç–æ–≤?'."""
        data = self.chats[chat_id]
        idx = int(cb_data.split("_", 1)[1])
        mover = data["turns"][idx]
        # —Å—Ä–∞–∑—É —Å—Ç–∞—Ä—Ç—É–µ–º —Ö–æ–¥
        return f"üïπ {mover}, –≤–∞—à —Ö–æ–¥! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dice"

    def roll_dice(self, chat_id: int, user):
        data = self.chats[chat_id]
        idx = data["current_pair_idx"]
        pair = data["pairs"][idx]
        uname = user.username or user.full_name

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å
        if data["turns"][idx] != uname:
            return f"–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç {data['turns'][idx]}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏."

        # –ë—Ä–æ—Å–æ–∫
        roll = random.randint(1, 6)
        prev = data["last_roll"][idx]
        data["last_roll"][idx] = roll

        # –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –±—Ä–æ—Å–æ–∫ ‚Äî –∂–¥–µ–º –≤—Ç–æ—Ä–æ–≥–æ
        if prev is None:
            # –º–µ–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å
            other = pair[0] if uname == pair[1] else pair[1]
            data["turns"][idx] = other
            return f"{uname} üé≤ {roll}\n–¢–µ–ø–µ—Ä—å {other} /dice"

        # —ç—Ç–æ –≤—Ç–æ—Ä–æ–π –±—Ä–æ—Å–æ–∫ ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        if roll > prev:
            winner = uname; loser = pair[0] if uname == pair[1] else pair[1]
        elif roll < prev:
            loser = uname; winner = pair[0] if uname == pair[1] else pair[1]
        else:
            # –Ω–∏—á—å—è ‚Äî –æ–±–Ω—É–ª—è–µ–º –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
            data["last_roll"][idx] = None
            return f"–ù–∏—á—å—è ({prev} vs {roll}), –±—Ä–æ—Å–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ ‚Äî {uname} /dice"

        # –ø–æ–¥—Å—á–µ—Ç –ø–æ–±–µ–¥
        data["scores"][idx][winner] += 1
        w = data["scores"][idx][winner]
        data["last_roll"][idx] = None  # —Å–±—Ä–æ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ –ø–∞—Ä—ã

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ –ø–∞—Ä—ã
        if w >= 2:
            # –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∞—É—Ç—Å–∞–π–¥–µ—Ä–æ–≤
            if len(data["round_players"]) == 4:
                data["semifinal_losers"].append(loser)

            text = f"üèÜ –ü–∞—Ä–∞ {idx+1}: {winner} –≤—ã–∏–≥—Ä–∞–ª ({w}‚Äì{data['scores'][idx][loser]})!"
            # –∑–∞–Ω–æ—Å–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
            data["next_round_players"].append(winner)
            data["current_pair_idx"] += 1

            # —Å–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ –∏–ª–∏ –∫–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞
            if data["current_pair_idx"] < len(data["pairs"]):
                # –Ω–æ–≤–∞—è –ø–∞—Ä–∞
                np = data["pairs"][data["current_pair_idx"]]
                kb = InlineKeyboardMarkup.from_button(
                    InlineKeyboardButton(
                        "–ì–æ—Ç–æ–≤?", callback_data=f"ready_{data['current_pair_idx']}"
                    )
                )
                return f"{text}\n\n–ü–∞—Ä–∞ {data['current_pair_idx']+1}:\n{np[0]} vs {np[1]}", kb

            # –≤—Å–µ –ø–∞—Ä—ã —Ä–∞—É–Ω–¥–∞ –æ—Ç—ã–≥—Ä–∞–Ω—ã
            # –µ—Å–ª–∏ –≤ next_round_players >1 ‚Äî —Å—Ç–∞—Ä—Ç—É–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
            if len(data["next_round_players"]) > 1:
                data["round_number"] += 1
                data["round_players"] = data["next_round_players"].copy()
                return self._start_round(chat_id)
            # –∏–Ω–∞—á–µ ‚Äî —Ç—É—Ä–Ω–∏—Ä –æ–∫–æ–Ω—á–µ–Ω
            champ = data["next_round_players"][0]
            # –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤–∏—Ü–µ-—á–µ–º–ø–∏–æ–Ω–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ loser
            runner_up = loser
            thirds = data["semifinal_losers"]
            return (
                f"ü•á –ß–µ–º–ø–∏–æ–Ω: {champ}\n"
                f"ü•à –§–∏–Ω–∞–ª–∏—Å—Ç: {runner_up}\n"
                f"ü•â –ú–µ—Å—Ç–∞: {thirds[0]}, {thirds[1]}\n"
                "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!"
            )

        # –µ—Å–ª–∏ –µ—â–µ –Ω–µ 2 –ø–æ–±–µ–¥, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞—Ä—É
        other = pair[0] if winner == pair[1] else pair[1]
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥ –¥–µ–ª–∞–µ—Ç –¥—Ä—É–≥–æ–π
        data["turns"][idx] = other
        return (
            f"{winner} –≤—ã–∏–≥—Ä–∞–ª —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥ ({roll} vs {prev}).\n"
            f"–°—á–µ—Ç: {data['scores'][idx][pair[0]]}‚Äì{data['scores'][idx][pair[1]]}.\n"
            f"{other}, –≤–∞—à —Ö–æ–¥ ‚Äî /dice"
        )
