# game.py

import random
import time
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, ContextTypes

class TournamentManager:
    def __init__(self, job_queue):
        self.job_queue = job_queue
        self.chats = {}

    def begin_signup(self, chat_id):
        self.chats[chat_id] = {
            "players": [],
            "stage": "signup",
            "next_round": [],
            "pairs": [],
            "current_pair_idx": 0,
            "round_pairs_count": 0,
            "ready": {},
            "first_ready_time": {},
            "ready_jobs": {},
            "round_wins": {},
            "round_rolls": {},
            "turn_order": {},
            "semifinal_losers": [],
        }

    def add_player(self, chat_id, user):
        data = self.chats.get(chat_id)
        if not data or data["stage"] != "signup":
            return False
        uname = user.username or user.full_name
        if uname in data["players"]:
            return False
        data["players"].append(uname)
        return True

    def list_players(self, chat_id):
        return ", ".join(self.chats[chat_id]["players"])

    def start_tournament(self, chat_id):
        data = self.chats.get(chat_id)
        players = data and data["players"].copy()
        if not players or len(players) < 2:
            raise ValueError("–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞.")
        random.shuffle(players)
        data["next_round"] = []

        # 1) Bye –ø—Ä–∏ –Ω–µ—á—ë—Ç–Ω–æ–º
        byes = []
        if len(players) % 2 == 1:
            bye = players.pop(random.randrange(len(players)))
            byes.append(bye)
            data["next_round"].append(bye)

        # 2) –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã
        pairs = [(players[i], players[i+1]) for i in range(0, len(players), 2)]
        data.update({
            "stage": "round",
            "pairs": pairs,
            "current_pair_idx": 0,
            "round_pairs_count": len(pairs),
            "ready": {},
            "first_ready_time": {},
            "ready_jobs": {},
            "round_wins": {},
            "round_rolls": {},
            "turn_order": {},
        })

        # 3) –ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞
        p1, p2 = pairs[0]
        kb = InlineKeyboardMarkup.from_button(
            InlineKeyboardButton("–ì–æ—Ç–æ–≤?", callback_data="ready_0")
        )
        msg = (f"–†–∞—É–Ω–¥ 1 ‚Äî –ø–∞—Ä–∞ 1: {p1} vs {p2}.\n"
               "–ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤?¬ª, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.")
        return byes, msg, kb

    async def confirm_ready(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query
        await q.answer()
        chat_id = q.message.chat.id
        idx = int(q.data.split("_")[1])
        uname = q.from_user.username or q.from_user.full_name
        data = self.chats[chat_id]

        lst = data.setdefault("ready", {}).setdefault(idx, [])
        if uname in lst:
            return  # —É–∂–µ –Ω–∞–∂–∏–º–∞–ª

        lst.append(uname)
        now = time.time()

        # –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫
        if len(lst) == 1:
            data["first_ready_time"][idx] = now
            job = self.job_queue.run_once(
                self._ready_timeout,
                when=60,
                chat_id=chat_id,
                data={"idx": idx}
            )
            data["ready_jobs"][idx] = job
            await context.bot.send_message(chat_id, f"{uname} –≥–æ—Ç–æ–≤! –ñ–¥—ë–º –≤—Ç–æ—Ä–æ–≥–æ‚Ä¶")

        # –í—Ç–æ—Ä–æ–π –∫–ª–∏–∫
        else:
            first_ts = data["first_ready_time"].get(idx, 0)
            if now - first_ts <= 60:
                # –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç
                job = data["ready_jobs"].pop(idx, None)
                if job:
                    job.schedule_removal()

                # —Å—Ç–∞—Ä—Ç—É–µ–º –º–∞—Ç—á
                p1, p2 = data["pairs"][idx]
                data["round_wins"][idx] = {p1: 0, p2: 0}
                first, second = random.sample((p1, p2), 2)
                data["turn_order"][idx] = (first, second)
                await context.bot.send_message(
                    chat_id,
                    f"{first} —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dice"
                )
            # –∏–Ω–∞—á–µ ‚Äî –¥–æ–∂–¥—ë–º—Å—è —Ç–∞–π–º–∞—É—Ç–∞

    def _ready_timeout(self, context: CallbackContext):
        job = context.job
        chat_id = job.chat_id
        idx = job.data["idx"]
        data = self.chats[chat_id]
        confirmed = data.get("ready", {}).get(idx, [])

        # –µ—Å–ª–∏ –æ–±–∞ —É—Å–ø–µ–ª–∏ ‚Äî –º–∞—Ç—á —É–∂–µ –∏–¥—ë—Ç
        if len(confirmed) >= 2:
            return

        # –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω ‚Äî –æ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–∞–ª—å—à–µ
        if len(confirmed) == 1:
            winner = confirmed[0]
            data["next_round"].append(winner)
            context.bot.send_message(
                chat_id,
                f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! {winner} ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≥–æ—Ç–æ–≤—ã–π, –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–∞–ª—å—à–µ."
            )
        else:
            # –Ω–∏–∫—Ç–æ –Ω–µ —É—Å–ø–µ–ª ‚Äî –æ–±–∞ –≤—ã–±—ã–≤–∞—é—Ç
            p1, p2 = data["pairs"][idx]
            context.bot.send_message(
                chat_id,
                f"‚è∞ –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª ‚Äî –æ–±–∞ –≤—ã–±—ã–≤–∞—é—Ç: {p1}, {p2}."
            )

        # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ –∏–ª–∏ —ç—Ç–∞–ø—É
        self._proceed_next_match(chat_id, context.bot)

    def _proceed_next_match(self, chat_id, bot):
        data = self.chats[chat_id]
        data["current_pair_idx"] += 1
        idx = data["current_pair_idx"]
        pairs = data["pairs"]

        # —Å–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞
        if idx < len(pairs):
            p1, p2 = pairs[idx]
            kb = InlineKeyboardMarkup.from_button(
                InlineKeyboardButton("–ì–æ—Ç–æ–≤?", callback_data=f"ready_{idx}")
            )
            bot.send_message(
                chat_id,
                (f"–ü–∞—Ä–∞ {idx+1}: {p1} vs {p2}.\n"
                 "–ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤?¬ª, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å."),
                reply_markup=kb
            )
            return

        # –≤—Å–µ –ø–∞—Ä—ã —Ä–∞—É–Ω–¥–∞ —Å—ã–≥—Ä–∞–Ω—ã ‚Äî –≥–æ—Ç–æ–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø –∏–ª–∏ —Ñ–∏–Ω–∞–ª
        winners = data["next_round"]

        # —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ª—É–∑–µ—Ä–æ–≤ –¥–ª—è 3-–≥–æ –º–µ—Å—Ç–∞
        if data["round_pairs_count"] == 2:
            for i, (a, b) in enumerate(data["pairs"]):
                w = data["round_wins"].get(i, {})
                if w.get(a,0) != w.get(b,0):
                    loser = a if w[a] < w[b] else b
                    data["semifinal_losers"].append(loser)

        # –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ ‚Äî –Ω–æ–≤—ã–π –∫—Ä—É–≥
        if len(winners) > 1:
            data["players"] = winners.copy()
            # —Å–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–∞–ø—É—Å—Ç–∏–º –Ω–æ–≤—ã–π —Ç—É—Ä
            return self.start_tournament(chat_id)[1:]  # msg, kb ‚Äî –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–∞–º

        # –∏–Ω–∞—á–µ ‚Äî —Ç—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à—ë–Ω, –æ–±—ä—è–≤–ª—è–µ–º –ø—Ä–∏–∑—ë—Ä–æ–≤
        champ = winners[0]
        runner = None
        wins = data["round_wins"].get(0, {})
        if wins:
            a, b = data["pairs"][0]
            runner = a if wins.get(a,0) < wins.get(b,0) else b
        thirds = data["semifinal_losers"]

        text = f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {champ}\n"
        if runner:
            text += f"ü•à –í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ: {runner}\n"
        if len(thirds) >= 2:
            text += f"ü•â –¢—Ä–µ—Ç—å–∏ –º–µ—Å—Ç–∞: {thirds[0]}, {thirds[1]}\n"

        bot.send_message(chat_id, text)
        data["stage"] = "finished"

    async def roll_dice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        user = update.effective_user
        data = self.chats[chat_id]

        if data["stage"] != "round":
            return "–¢—É—Ä–Ω–∏—Ä –µ—â—ë –Ω–µ –∏–¥—ë—Ç."

        idx = data["current_pair_idx"]
        if idx >= len(data["pairs"]):
            return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞—Ä—ã."

        uname = user.username or user.full_name
        p1, p2 = data["pairs"][idx]
        if uname not in (p1, p2):
            return "–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä–µ."

        wins = data["round_wins"].setdefault(idx, {p1: 0, p2: 0})
        rolls = data["round_rolls"].setdefault(idx, {})
        first, second = data["turn_order"].get(idx, (p1, p2))

        # —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥
        if not rolls:
            turn = first
        elif len(rolls) == 1:
            turn = second
        else:
            turn = None

        if uname != turn:
            return "–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥."

        val = random.randint(1, 6)
        rolls[uname] = val

        if len(rolls) < 2:
            next_turn = second if uname == first else first
            return f"{uname} –±—Ä–æ—Å–∏–ª {val}. –•–æ–¥ {next_turn}."
        else:
            r1, r2 = rolls[p1], rolls[p2]
            # –Ω–∏—á—å—è
            if r1 == r2:
                data["round_rolls"][idx] = {}
                return f"–ù–∏—á—å—è {r1}‚Äì{r2}! –ü–µ—Ä–µ–±—Ä–æ—Å, {first} —Å–Ω–æ–≤–∞ –ø–µ—Ä–≤—ã–º."
            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞
            winner = p1 if r1 > r2 else p2
            wins[winner] += 1
            data["round_rolls"][idx] = {}

            # –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –Ω–∞–±—Ä–∞–ª 2 –ø–æ–±–µ–¥—ã ‚Äî –º–∞—Ç—á –æ–∫–æ–Ω—á–µ–Ω
            if wins[winner] >= 2:
                data["next_round"].append(winner)
                # —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—É –∏–ª–∏ —Ñ–∏–Ω–∞–ª
                self._proceed_next_match(chat_id, context.bot)
                return f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–∞—Ä—ã: {winner}"
            else:
                # —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –≤–Ω—É—Ç—Ä–∏ –ø–∞—Ä—ã
                data["turn_order"][idx] = (first, second)
                return f"–°—á—ë—Ç {wins[p1]}‚Äì{wins[p2]}. {first} —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º."
