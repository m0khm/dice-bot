# main.py
import logging
import os

from dotenv import load_dotenv
from telegram import BotCommand, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

from game import TournamentManager

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Ñ–∏–≥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN not set in .env")

ALLOWED_CHATS = {
    int(x) for x in os.getenv("ALLOWED_CHATS", "").split(",") if x.strip()
}
OWNER_IDS = [
    int(x) for x in os.getenv("OWNER_IDS", "").split(",") if x.strip()
]
DB_PATH = os.getenv("DB_PATH", "scores.db")

COMMANDS_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    "/start       ‚Äî ü§ñ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    "/game        ‚Äî üë§ –ù–∞—á–∞—Ç—å —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∞–¥–º–∏–Ω)\n"
    "/game_start  ‚Äî üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä (–∞–¥–º–∏–Ω)\n"
    "/dice        ‚Äî üé≤ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ö–æ–¥–∞\n"
    "/exchange    ‚Äî üí± –û–±–º–µ–Ω—è—Ç—å –æ—á–∫–∏ (–≤ –ª–∏—á–∫–µ)\n"
    "/id          ‚Äî üÜî –ü–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞\n"
)

# ‚îÄ‚îÄ‚îÄ Helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def remove_webhook(app):
    await app.bot.delete_webhook(drop_pending_updates=True)
    logger.info("Webhook deleted.")

async def set_commands(app):
    await app.bot.set_my_commands([
        BotCommand("start",     "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand("help",      "–ü–æ–º–æ—â—å"),
        BotCommand("game",      "–ù–∞—á–∞—Ç—å —Å–±–æ—Ä (–∞–¥–º–∏–Ω)"),
        BotCommand("game_start","–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä (–∞–¥–º–∏–Ω)"),
        BotCommand("dice",      "–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫"),
        BotCommand("exchange",  "–û–±–º–µ–Ω—è—Ç—å –æ—á–∫–∏"),
        BotCommand("id",        "–ü–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞"),
    ])
    logger.info("Bot commands set.")

def is_allowed_chat(chat_id: int) -> bool:
    return chat_id in ALLOWED_CHATS

# ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_chat.send_message(COMMANDS_TEXT)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_chat.send_message(COMMANDS_TEXT)

async def show_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    await update.effective_chat.send_message(f"Chat ID: `{cid}`", parse_mode="Markdown")

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type != "private" and not is_allowed_chat(chat.id):
        return await update.message.reply_text("‚ùå –ë–æ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
    member = await context.bot.get_chat_member(chat.id, update.effective_user.id)
    if member.status not in ("administrator", "creator"):
        return await update.message.reply_text("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Å–±–æ—Ä.")
    tournament.begin_signup(chat.id)
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–£—á–∞—Å—Ç–≤—É—é", callback_data="join_game")]])
    await chat.send_message("üîî –ù–∞–∂–º–∏—Ç–µ ¬´–£—á–∞—Å—Ç–≤—É—é¬ª –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", reply_markup=kb)

async def join_game_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    cid = q.message.chat.id
    if not is_allowed_chat(cid):
        return
    if tournament.add_player(cid, q.from_user):
        lst = tournament.list_players(cid)
        await q.edit_message_text(f"–£—á–∞—Å—Ç–≤—É—é—Ç: {lst}", reply_markup=q.message.reply_markup)

async def game_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type != "private" and not is_allowed_chat(chat.id):
        return await update.message.reply_text("‚ùå –ë–æ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
    member = await context.bot.get_chat_member(chat.id, update.effective_user.id)
    if member.status not in ("administrator", "creator"):
        return await update.message.reply_text("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä.")
    try:
        byes, pairs_list, first_msg, kb = tournament.start_tournament(chat.id)
    except ValueError as e:
        return await update.message.reply_text(str(e))

    for bye in byes:
        await context.bot.send_message(chat.id, f"üéâ {bye} –ø–æ–ª—É—á–∞–µ—Ç bye")
    m = await context.bot.send_message(chat.id, "–°–µ—Ç–∫–∏:\n" + pairs_list)
    await context.bot.pin_chat_message(chat.id, m.message_id)
    await context.bot.send_message(chat.id, first_msg, reply_markup=kb)

async def ready_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await tournament.confirm_ready(update, context)

async def dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type != "private" and not is_allowed_chat(chat.id):
        return await update.message.reply_text("‚ùå –ë–æ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
    text = await tournament.roll_dice(update, context)
    if text:
        await update.message.reply_text(text)

async def exchange(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type != "private":
        return
    user = update.effective_user
    uname = user.username or user.full_name
    pts = tournament.get_points(uname)
    if pts <= 0:
        return await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –æ—á–∫–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞.")
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–û–±–º–µ–Ω—è—Ç—å", callback_data="exchange")]])
    await update.message.reply_text(f"–£ –≤–∞—Å {pts} –æ—á–∫–æ–≤", reply_markup=kb)

async def exchange_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uname = q.from_user.username or q.from_user.full_name
    pts = tournament.get_points(uname)
    if pts <= 0:
        return await q.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –æ—á–∫–æ–≤.")
    taken = tournament.exchange_points(uname)
    text = f"üí± {uname} –æ–±–º–µ–Ω—è–ª {taken} –æ—á–∫–æ–≤"
    for aid in OWNER_IDS:
        await context.bot.send_message(aid, text)
    await q.edit_message_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ {taken} –æ—á–∫–æ–≤")

# ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("Exception while handling update:", exc_info=context.error)
    # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    # if update and isinstance(update, Update) and update.effective_chat:
    #     await update.effective_chat.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –º—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    app = (
        ApplicationBuilder()
        .token(TOKEN)
        .post_init(remove_webhook)
        .post_init(set_commands)
        .build()
    )
    app.add_error_handler(error_handler)

    global tournament
    tournament = TournamentManager(
        job_queue=app.job_queue,
        allowed_chats=ALLOWED_CHATS,
        db_path=DB_PATH,
        owner_ids=OWNER_IDS
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    app.add_handler(CommandHandler("start",      start))
    app.add_handler(CommandHandler("help",       help_command))
    app.add_handler(CommandHandler("id",         show_id))
    app.add_handler(CommandHandler("game",       game))
    app.add_handler(CallbackQueryHandler(join_game_cb, pattern="^join_game$"))
    app.add_handler(CommandHandler("game_start", game_start))
    app.add_handler(CallbackQueryHandler(ready_cb,   pattern="^ready_"))
    app.add_handler(CommandHandler("dice",       dice))
    app.add_handler(CommandHandler("exchange",   exchange))
    app.add_handler(CallbackQueryHandler(exchange_cb, pattern="^exchange$"))

    logger.info("Bot started")
    app.run_polling()

if __name__ == "__main__":
    main()
