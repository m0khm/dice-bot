import logging
import os
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
)
from game import TournamentManager

# ‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî‚Äî‚Äî
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

# ‚Äî‚Äî‚Äî –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî‚Äî‚Äî
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å BOT_TOKEN –≤ .env")

tournament = TournamentManager()

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ –Ω–∞—Å—Ç–æ—è—â–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞)
ALLOWED_IDS = {123456789, 987654321}  # <-- –≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–∏ Telegram ID

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø—Ä–∞–≤–∫–∞."""
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø TournamentBotüé≤\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/game ‚Äî —Å–æ–±—Ä–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
        "/game_start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
        "/dice ‚Äî –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ (–≤–æ –≤—Ä–µ–º—è —Ö–æ–¥–∞)\n"
    )
    await update.effective_chat.send_message(text=text)

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)."""
    chat = update.effective_chat
    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ —á–∞—Ç–∞ –∏–ª–∏ –≤ ALLOWED_IDS
    member = await context.bot.get_chat_member(chat.id, user.id)
    if not (member.status in ("administrator", "creator") or user.id in ALLOWED_IDS):
        return await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")

    # –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä
    tournament.begin_signup(chat.id)
    kb = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton("–£—á–∞—Å—Ç–≤—É—é", callback_data="join_game")
    )
    await context.bot.send_message(
        chat_id=chat.id,
        text="üìù –ù–∞–±–æ—Ä –Ω–∞ –∏–≥—Ä—É –æ—Ç–∫—Ä—ã—Ç! –ù–∞–∂–º–∏—Ç–µ ¬´–£—á–∞—Å—Ç–≤—É—é¬ª —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è.",
        reply_markup=kb,
    )

async def join_game_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–£—á–∞—Å—Ç–≤—É—é¬ª."""
    query = update.callback_query
    await query.answer()
    user = query.from_user
    added = tournament.add_player(query.message.chat.id, user)
    if not added:
        return  # —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –∏–ª–∏ –Ω–∞–±–æ—Ä –Ω–µ –∏–¥—ë—Ç
    txt = (
        "üìù –ù–∞–±–æ—Ä –Ω–∞ –∏–≥—Ä—É –æ—Ç–∫—Ä—ã—Ç! –£—á–∞—Å—Ç–≤—É—é—Ç:\n"
        f"{tournament.list_players(query.message.chat.id)}"
    )
    await query.edit_message_text(text=txt, reply_markup=query.message.reply_markup)

async def game_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)."""
    chat = update.effective_chat
    user = update.effective_user
    member = await context.bot.get_chat_member(chat.id, user.id)
    if not (member.status in ("administrator", "creator") or user.id in ALLOWED_IDS):
        return await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä.")

    try:
        text, kb = tournament.start_tournament(chat.id)
    except ValueError as e:
        return await update.message.reply_text(str(e))
    await context.bot.send_message(chat_id=chat.id, text=text, reply_markup=kb)

async def ready_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–∞—Ä—ã."""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id
    user = query.from_user

    result = tournament.confirm_ready(chat_id, user, query.data)
    if result:
        # result ‚Äî –ª–∏–±–æ —Å—Ç—Ä–æ–∫–∞ —Å —á—å–∏–º —Ö–æ–¥–æ–º, –ª–∏–±–æ —Å—Ç—Ä–æ–∫–∞ "–†–∞—É–Ω–¥ ...", –ª–∏–±–æ —Ñ–∏–Ω–∞–ª
        # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É
        await query.message.delete()
        await context.bot.send_message(chat_id=chat_id, text=result)

async def dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫."""
    chat_id = update.effective_chat.id
    user = update.effective_user
    text = tournament.roll_dice(chat_id, user)
    await update.message.reply_text(text)

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("game", game))
    app.add_handler(CallbackQueryHandler(join_game_cb, pattern="^join_game$"))
    app.add_handler(CommandHandler("game_start", game_start))
    app.add_handler(CallbackQueryHandler(ready_cb, pattern="^ready_"))
    app.add_handler(CommandHandler("dice", dice))

    app.run_polling()

if __name__ == "__main__":
    main()
