# main.py
import logging
import os
from dotenv import load_dotenv
from telegram import BotCommand, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

from game import TournamentManager

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN not set in .env")
# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä "12345678,-98765432"
ALLOWED_CHATS = {int(x) for x in os.getenv("ALLOWED_CHATS", "").split(",") if x}
# –í–∞—à Telegram ID, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±–º–µ–Ω
OWNER_ID = int(os.getenv("OWNER_ID", "0"))
# –ü—É—Ç—å –∫ –±–∞–∑–µ –æ—á–∫–æ–≤
DB_PATH = os.getenv("DB_PATH", "scores.db")

# –¢–µ–∫—Å—Ç /start
COMMANDS_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    "/start       ‚Äî ü§ñ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    "/game        ‚Äî üë§ –ù–∞—á–∞—Ç—å —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∞–¥–º–∏–Ω)\n"
    "/game_start  ‚Äî üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä (–∞–¥–º–∏–Ω)\n"
    "/dice        ‚Äî üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ –≤–æ –≤—Ä–µ–º—è —Ö–æ–¥–∞\n"
    "/exchange    ‚Äî üí± –û–±–º–µ–Ω—è—Ç—å –æ—á–∫–∏ (–≤ –ª–∏—á–∫–µ)\n"
)

# –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
async def remove_webhook(app):
    await app.bot.delete_webhook(drop_pending_updates=True)
    logger.info("Webhook deleted")

async def set_commands(app):
    await app.bot.set_my_commands([
        BotCommand("start",      "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand("help",       "–ü–æ–º–æ—â—å"),
        BotCommand("game",       "–ù–∞—á–∞—Ç—å —Å–±–æ—Ä (–∞–¥–º–∏–Ω)"),
        BotCommand("game_start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä (–∞–¥–º–∏–Ω)"),
        BotCommand("dice",       "–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫"),
        BotCommand("exchange",   "–û–±–º–µ–Ω—è—Ç—å –æ—á–∫–∏ (–ª–∏—á–∫–∞)"),
    ])
    logger.info("Commands registered")

# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_chat.send_message(COMMANDS_TEXT)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_chat.send_message(COMMANDS_TEXT)

def is_allowed(chat_id: int) -> bool:
    return chat_id in ALLOWED_CHATS

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type != "private" and not is_allowed(chat.id):
        return await update.message.reply_text("‚ùå –ë–æ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
    member = await context.bot.get_chat_member(chat.id, update.effective_user.id)
    if member.status not in ("administrator", "creator"):
        return await update.message.reply_text("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Å–±–æ—Ä.")
    tournament.begin_signup(chat.id)
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–£—á–∞—Å—Ç–≤—É—é", callback_data="join_game")]])
    await chat.send_message("üîî –ù–∞–∂–º–∏—Ç–µ ¬´–£—á–∞—Å—Ç–≤—É—é¬ª –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", reply_markup=kb)

async def join_game_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    chat_id = q.message.chat.id
    if not is_allowed(chat_id):
        return
    if tournament.add_player(chat_id, q.from_user):
        lst = tournament.list_players(chat_id)
        await q.edit_message_text(f"–£—á–∞—Å—Ç–≤—É—é—Ç: {lst}", reply_markup=q.message.reply_markup)

async def game_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type != "private" and not is_allowed(chat.id):
        return await update.message.reply_text("‚ùå –ë–æ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
    member = await context.bot.get_chat_member(chat.id, update.effective_user.id)
    if member.status not in ("administrator", "creator"):
        return await update.message.reply_text("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä.")
    try:
        byes, pairs_list, first_msg, kb = tournament.start_tournament(chat.id)
    except ValueError as e:
        return await update.message.reply_text(str(e))
    for bye in byes:
        await context.bot.send_message(chat.id, f"üéâ {bye} –ø–æ–ª—É—á–∞–µ—Ç bye")
    m = await context.bot.send_message(chat.id, "–°–µ—Ç–∫–∏:\n" + pairs_list)
    await context.bot.pin_chat_message(chat.id, m.message_id)
    await context.bot.send_message(chat.id, first_msg, reply_markup=kb)

async def ready_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.callback_query.message.chat.id
    if chat_id not in ALLOWED_CHATS: return
    await tournament.confirm_ready(update, context)

async def dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type != "private" and not is_allowed(chat.id):
        return await update.message.reply_text("‚ùå –ë–æ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
    text = await tournament.roll_dice(update, context)
    if text:
        await update.message.reply_text(text)

# –û–±–º–µ–Ω –æ—á–∫–æ–≤ ‚Äî –≤ –ª–∏—á–∫–µ
async def exchange(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type != "private":
        return
    user = update.effective_user
    pts = tournament.get_points(user.username or user.full_name)
    if pts is None:
        return await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—á–∫–æ–≤.")
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–û–±–º–µ–Ω—è—Ç—å", callback_data="exchange")]])
    await update.message.reply_text(f"–í–∞—à–∏ –æ—á–∫–∏: {pts}", reply_markup=kb)

async def exchange_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    user = q.from_user
    uname = user.username or user.full_name
    pts = tournament.get_points(uname)
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    await context.bot.send_message(OWNER_ID, f"{uname} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–±–º–µ–Ω {pts} –æ—á–∫–æ–≤")
    await q.edit_message_text("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É")

# --- Main ---
def main():
    app = (
        ApplicationBuilder()
        .token(TOKEN)
        .post_init(remove_webhook)
        .post_init(set_commands)
        .build()
    )
    global tournament
    tournament = TournamentManager(
        job_queue=app.job_queue,
        allowed_chats=ALLOWED_CHATS,
        db_path=DB_PATH,
        owner_id=OWNER_ID
    )
    app.add_handler(CommandHandler("start",      start))
    app.add_handler(CommandHandler("help",       help_command))
    app.add_handler(CommandHandler("game",       game))
    app.add_handler(CallbackQueryHandler(join_game_cb, pattern="^join_game$"))
    app.add_handler(CommandHandler("game_start", game_start))
    app.add_handler(CallbackQueryHandler(ready_cb,   pattern="^ready_"))
    app.add_handler(CommandHandler("dice",       dice))
    app.add_handler(CommandHandler("exchange",   exchange))
    app.add_handler(CallbackQueryHandler(exchange_cb, pattern="^exchange$"))

    logger.info("Bot started")
    app.run_polling()

if __name__ == "__main__":
    main()
