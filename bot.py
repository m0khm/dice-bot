import logging
import os
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
)
from game import TournamentManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("–£–∫–∞–∂–∏—Ç–µ BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env")

# –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤: —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —á–∞—Ç–∞–º
tournament = TournamentManager()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""
    chat = update.effective_chat
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø TournamentBotüé≤\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/game ‚Äî —Å–æ–±—Ä–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "/game_start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä\n"
        "/dice ‚Äî –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ (–≤–æ –≤—Ä–µ–º—è —Ö–æ–¥–∞)\n"
    )
    await context.bot.send_message(chat_id=chat.id, text=text)

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    chat = update.effective_chat
    if not update.effective_user or not update.effective_user.id:
        return
    # —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
    member = await context.bot.get_chat_member(chat.id, update.effective_user.id)
    if member.status not in ("administrator", "creator"):
        return await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–±–æ—Ä.")
    keyboard = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton("–£—á–∞—Å—Ç–≤—É—é", callback_data="join_game")
    )
    tournament.begin_signup(chat.id)
    await context.bot.send_message(
        chat_id=chat.id,
        text="–ù–∞–±–æ—Ä –Ω–∞ –∏–≥—Ä—É! –ù–∞–∂–º–∏—Ç–µ ¬´–£—á–∞—Å—Ç–≤—É—é¬ª, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è.",
        reply_markup=keyboard,
    )

async def join_game_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ¬´–£—á–∞—Å—Ç–≤—É—é¬ª."""
    query = update.callback_query
    await query.answer()
    user = query.from_user
    added = tournament.add_player(query.message.chat.id, user)
    if added:
        await query.edit_message_text(
            text=f"–ù–∞–±–æ—Ä –Ω–∞ –∏–≥—Ä—É! –£—á–∞—Å—Ç–≤—É—é—Ç: {tournament.list_players(query.message.chat.id)}",
            reply_markup=query.message.reply_markup,
        )

async def game_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥."""
    chat_id = update.effective_chat.id
    try:
        bracket_msg, keyboard = tournament.start_tournament(chat_id)
    except ValueError as e:
        return await update.message.reply_text(str(e))
    await context.bot.send_message(chat_id=chat_id, text=bracket_msg, reply_markup=keyboard)

async def ready_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–∞—Ä—ã."""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id
    user = query.from_user
    result = await tournament.confirm_ready(chat_id, user, context.bot)
    if result:
        await query.message.delete() # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É
        # –µ—Å–ª–∏ –æ–±–∞ –≥–æ—Ç–æ–≤—ã ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –ø–µ—Ä–≤–æ–º—É
        await context.bot.send_message(chat_id=chat_id, text=result)

async def dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ –≤–æ –≤—Ä–µ–º—è —Ö–æ–¥–∞."""
    chat_id = update.effective_chat.id
    user = update.effective_user
    text = tournament.roll_dice(chat_id, user)
    await update.message.reply_text(text)

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("game", game))
    app.add_handler(CallbackQueryHandler(join_game_cb, pattern="^join_game$"))
    app.add_handler(CommandHandler("game_start", game_start))
    app.add_handler(CallbackQueryHandler(ready_cb, pattern="^ready_"))
    app.add_handler(CommandHandler("dice", dice))
    app.run_polling()

if __name__ == "__main__":
    main()