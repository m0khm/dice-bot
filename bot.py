# bot.py

import logging
import os
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

from game import TournamentManager

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")

COMMANDS_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø TournamentBotüé≤\n\n"
    "/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ\n"
    "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    "/game ‚Äî (–∞–¥–º–∏–Ω) –Ω–∞—á–∞—Ç—å —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
    "/game_start ‚Äî (–∞–¥–º–∏–Ω) –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä\n"
    "/dice ‚Äî –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ –≤–æ –≤—Ä–µ–º—è —Ö–æ–¥–∞\n"
)

async def on_startup(app):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã Telegram-–∫–ª–∏–µ–Ω—Ç –ø–æ–∫–∞–∑—ã–≤–∞–ª –∏—Ö –ø—Ä–∏ –≤–≤–æ–¥–µ `/`
    await app.bot.set_my_commands([
        BotCommand("start",      "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"),
        BotCommand("help",       "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand("game",       "–ù–∞—á–∞—Ç—å —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∞–¥–º–∏–Ω)"),
        BotCommand("game_start","–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä (–∞–¥–º–∏–Ω)"),
        BotCommand("dice",       "–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ –≤–æ –≤—Ä–µ–º—è —Ö–æ–¥–∞"),
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_chat.send_message(COMMANDS_TEXT)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_chat.send_message(COMMANDS_TEXT)

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    member = await context.bot.get_chat_member(chat.id, update.effective_user.id)
    if member.status not in ("administrator", "creator"):
        return await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Å–±–æ—Ä.")
    tournament.begin_signup(chat.id)
    kb = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton("–£—á–∞—Å—Ç–≤—É—é", callback_data="join_game")
    )
    await chat.send_message("–ù–∞–±–æ—Ä –Ω–∞ –∏–≥—Ä—É! –ù–∞–∂–º–∏—Ç–µ ¬´–£—á–∞—Å—Ç–≤—É—é¬ª", reply_markup=kb)

async def join_game_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if tournament.add_player(q.message.chat.id, q.from_user):
        lst = tournament.list_players(q.message.chat.id)
        await q.edit_message_text(f"–£—á–∞—Å—Ç–≤—É—é—Ç: {lst}", reply_markup=q.message.reply_markup)

async def game_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        byes, pairs_list, first_msg, kb = tournament.start_tournament(chat_id)
    except ValueError as e:
        return await update.message.reply_text(str(e))

    # 1) Bye
    for bye in byes:
        await context.bot.send_message(chat_id, f"üéâ {bye} —Å—Ä–∞–∑—É –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ 2-–π —Ä–∞—É–Ω–¥ (bye).")

    # 2) –ü—É–±–ª–∏–∫—É–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–µ—Ç–∫—É
    m = await context.bot.send_message(chat_id, text="–°–µ—Ç–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞:\n" + pairs_list)
    await context.bot.pin_chat_message(chat_id=chat_id, message_id=m.message_id)

    # 3) –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É
    await context.bot.send_message(chat_id, text=first_msg, reply_markup=kb)

async def ready_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await tournament.confirm_ready(update, context)

async def dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = await tournament.roll_dice(update, context)
    if text:
        await update.message.reply_text(text)

def main():
    app = (
        ApplicationBuilder()
        .token(TOKEN)
        .post_init(on_startup)
        .build()
    )
    global tournament
    tournament = TournamentManager(app.job_queue)

    app.add_handler(CommandHandler("start",      start))
    app.add_handler(CommandHandler("help",       help_command))
    app.add_handler(CommandHandler("game",       game))
    app.add_handler(CallbackQueryHandler(join_game_cb, pattern="^join_game$"))
    app.add_handler(CommandHandler("game_start", game_start))
    app.add_handler(CallbackQueryHandler(ready_cb,  pattern="^ready_"))
    app.add_handler(CommandHandler("dice",       dice))

    app.run_polling()

if __name__ == "__main__":
    main()
